# <<<<< YAML 파일 사용이유
# 1. 계층형 구성으로 설정 내용을 작성하여 properties 파일보다 중복된 내용을 줄여주며, 가독성이 좋습니다.
# 2. 멀티 모듈 환경에 properties 파일을 적용하는 경우 각각의 문서를 생성하여 설정 파일 내용을 변경해주지만,
#    YAML의 경우 문서를 나누는 기능('---')을 통해 하나의 설정 파일에서 구조화가 가능하여 보다 편리하게 관리 할 수 있습니다.
#
# <<<<< JPA 사용이유
# 1. 반복적인 CRUD SQL문을 줄일 수 있습니다.
# 2. DB 테이블로부터 의존도를 줄이며, JPA를 통해 보다 객체지향 적인 코드 작성이 가능합니다.
# 3. 영속성 컨텍스트(persist context)를 통해 DB 커넥션 리소스 낭비를 줄일 수 있습니다.
#
# <<<<< JPA 주요 옵션 설명
# - spring.jpa.database
#     : JPA 가 적용될 데이터베이스를 뜻하며, 이번 프로젝트는 MySQL로 프로젝트를 개발했습니다.
# - spring.jpa.database-platform
#     : JPA 데이터베이스 플랫폼(ex. MyInnoDBDialect, OracleDialect 등)을 지정함으로써 SQL Dialect를 지정합니다.
#     : SQL Dialect란 사전적으로 방언이라는 의미로써 JPA에서는 MS-SQL, Oracle, MySQL에서 각각 다르게 쓰이는 SQL문을 추상화해 각각의 구현체에 맞는 쿼리문을 생성해줍니다.
# - spring.jpa.open-in-view
#     : JPA의 OSIV(Open Session In View) 설정을 지정해주는 것입니다.
#       OSIV는 웹 요청이 완료될 때까지 동일한 EntityManager를 갖도록 해주는 것이며, true인 경우 Request가 끝날때까지
#       영속성 컨텍스트가 지속적으로 유지되 유연한 코드 작성에 어려움이 있어 false로 지정했습니다.

spring:
  profiles: dev
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/online_shopping_mall?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: dev_osm
    password: dev_osm
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# logging.level.org.hibernate.type.descriptor.sql : SQL에서 물음표로 표기된 부분( bind parameter )을 로그로 출력해서 확인 가능.
logging:
  level:
    org:
      hibernate:
        SQL: debug
        type:
          descriptor:
            sql:
              BasicBinder: trace
  file:
    name: ../logs/Online_Shopping_Mall/osm.log

---
spring:
  profiles: local
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/online_shopping_mall?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: dev_osm
    password: dev_osm
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# logging.level.org.hibernate.type.descriptor.sql : SQL에서 물음표로 표기된 부분( bind parameter )을 로그로 출력해서 확인 가능.
logging:
  level:
    org:
      hibernate:
        SQL: debug
        type:
          descriptor:
            sql:
              BasicBinder: trace